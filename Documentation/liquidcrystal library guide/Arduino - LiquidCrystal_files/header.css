html {
  box-sizing: border-box;
}

*, *::after, *::before {
  box-sizing: inherit;
}

@font-face {
  font-family: 'Typonine Mono Regular';
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001720.eot");
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001720.eot?#iefix") format("embedded-opentype"), url("https://content.arduino.cc/fonts/WF-028075-009795-001720.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001720.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001720.svg#Typotheque_webfonts_service") format("svg");
}

@font-face {
  font-family: 'Typonine Sans Light';
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001726.eot");
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001726.eot?#iefix") format("embedded-opentype"), url("https://content.arduino.cc/fonts/WF-028075-009795-001726.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001726.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001726.svg#Typotheque_webfonts_service") format("svg");
}

@font-face {
  font-family: 'Typonine Sans Regular';
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001728.eot");
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001728.eot?#iefix") format("embedded-opentype"), url("https://content.arduino.cc/fonts/WF-028075-009795-001728.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001728.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001728.svg#Typotheque_webfonts_service") format("svg");
}

@font-face {
  font-family: 'Typonine Sans Regular Italic';
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001729.eot");
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001729.eot?#iefix") format("embedded-opentype"), url("https://content.arduino.cc/fonts/WF-028075-009795-001729.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001729.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001729.svg#Typotheque_webfonts_service") format("svg");
}

@font-face {
  font-family: 'Typonine Sans Medium';
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001730.eot");
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001730.eot?#iefix") format("embedded-opentype"), url("https://content.arduino.cc/fonts/WF-028075-009795-001730.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001730.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001730.svg#Typotheque_webfonts_service") format("svg");
}

@font-face {
  font-family: 'Typonine Sans Bold';
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001732.eot");
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001732.eot?#iefix") format("embedded-opentype"), url("https://content.arduino.cc/fonts/WF-028075-009795-001732.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001732.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001732.svg#Typotheque_webfonts_service") format("svg");
}

html {
  box-sizing: border-box;
}

*, *::after, *::before {
  box-sizing: inherit;
}

@font-face {
  font-family: 'Typonine Mono Regular';
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001720.eot");
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001720.eot?#iefix") format("embedded-opentype"), url("https://content.arduino.cc/fonts/WF-028075-009795-001720.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001720.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001720.svg#Typotheque_webfonts_service") format("svg");
}

@font-face {
  font-family: 'Typonine Sans Light';
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001726.eot");
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001726.eot?#iefix") format("embedded-opentype"), url("https://content.arduino.cc/fonts/WF-028075-009795-001726.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001726.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001726.svg#Typotheque_webfonts_service") format("svg");
}

@font-face {
  font-family: 'Typonine Sans Regular';
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001728.eot");
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001728.eot?#iefix") format("embedded-opentype"), url("https://content.arduino.cc/fonts/WF-028075-009795-001728.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001728.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001728.svg#Typotheque_webfonts_service") format("svg");
}

@font-face {
  font-family: 'Typonine Sans Regular Italic';
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001729.eot");
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001729.eot?#iefix") format("embedded-opentype"), url("https://content.arduino.cc/fonts/WF-028075-009795-001729.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001729.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001729.svg#Typotheque_webfonts_service") format("svg");
}

@font-face {
  font-family: 'Typonine Sans Medium';
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001730.eot");
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001730.eot?#iefix") format("embedded-opentype"), url("https://content.arduino.cc/fonts/WF-028075-009795-001730.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001730.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001730.svg#Typotheque_webfonts_service") format("svg");
}

@font-face {
  font-family: 'Typonine Sans Bold';
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001732.eot");
  src: url("https://content.arduino.cc/fonts/WF-028075-009795-001732.eot?#iefix") format("embedded-opentype"), url("https://content.arduino.cc/fonts/WF-028075-009795-001732.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001732.woff") format("woff"), url("https://content.arduino.cc/fonts/WF-028075-009795-001732.svg#Typotheque_webfonts_service") format("svg");
}

html,
body {
  -webkit-font-smoothing: antialiased;
  background: none;
  margin: 0;
}

#header {
  height: 120px;
}

@media screen and (max-width: 1024px) {
  #header {
    height: 54px;
  }
}

#ino-header nav.arduino-nav {
  -webkit-transition: height 0.3s;
  -moz-transition: height 0.3s;
  transition: height 0.3s;
  background-color: #00979d;
  display: flex;
  font-family: "Typonine Sans Regular", "Lucida Grande", Lucida, Verdana, sans-serif;
  font-size: 13px;
  height: 120px;
  justify-content: flex-end;
  position: fixed;
  top: 0;
  width: 100%;
  z-index: 1000;
}

#ino-header nav.arduino-nav *,
#ino-header nav.arduino-nav *::after,
#ino-header nav.arduino-nav *::before {
  box-sizing: initial;
}

#ino-header nav.arduino-nav .auth-required,
#ino-header nav.arduino-nav .user-mobile .auth-required {
  display: none;
}

#ino-header nav.arduino-nav .logo {
  flex-grow: 1;
}

#ino-header nav.arduino-nav .logo-link {
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  transition: all 0.3s;
  background-image: url("../images/arduino_logo.svg"), url("../images/arduino_logo_compressed.svg");
  background-position: 30px 10px, 30px 120px;
  background-repeat: no-repeat, no-repeat;
  background-size: 134px 100px, 58px 32px;
  box-sizing: content-box;
  display: block;
  height: 100px;
  left: 0;
  padding: 10px 30px;
  position: relative;
  width: 134px;
}

#ino-header nav.arduino-nav .logo-link:hover {
  background-color: #7fcbcd;
}

@media screen and (max-width: 1024px) {
  #ino-header nav.arduino-nav .logo-link:hover {
    background-color: #00979d;
  }
}

#ino-header nav.arduino-nav .logo-link:focus {
  outline: none;
}

#ino-header nav.arduino-nav.collapsed {
  height: 54px;
}

#ino-header nav.arduino-nav.collapsed .logo-link {
  background-position: 30px -100px, 20px 11px;
  height: 32px;
  padding: 11px 30px;
  width: 58px;
}

#ino-header nav.arduino-nav:not(.collapsed) #search-bar {
  position: absolute;
  right: 0;
}

#ino-header nav.arduino-nav .main-nav {
  display: flex;
}

#ino-header nav.arduino-nav .burger-menu {
  display: none;
}

#ino-header nav.arduino-nav ul {
  list-style: none;
  margin: 0;
  padding-left: 0;
}

#ino-header nav.arduino-nav .level-1,
#ino-header nav.arduino-nav .burger-menu {
  box-sizing: border-box;
  height: 54px;
}

#ino-header nav.arduino-nav .level-1 a,
#ino-header nav.arduino-nav .burger-menu a {
  -webkit-transition: background 0.6s;
  -moz-transition: background 0.6s;
  transition: background 0.6s;
  color: #fff;
  cursor: pointer;
  display: inline-block;
  font-family: "Typonine Sans Medium", "Lucida Grande", Lucida, Verdana, sans-serif;
  font-weight: 500;
  letter-spacing: 3px;
  line-height: 18px;
  padding: 18px 9px;
  text-decoration: none;
  text-transform: uppercase;
  white-space: nowrap;
}

#ino-header nav.arduino-nav .level-1 a img,
#ino-header nav.arduino-nav .burger-menu a img {
  max-width: none;
}

@media screen and (min-width: 1220px) {
  #ino-header nav.arduino-nav .level-1 a,
  #ino-header nav.arduino-nav .burger-menu a {
    padding: 18px 12px;
  }
}

#ino-header nav.arduino-nav .level-1.active,
#ino-header nav.arduino-nav .burger-menu.active {
  background-color: #008184;
}

#ino-header nav.arduino-nav .level-1 .login-button,
#ino-header nav.arduino-nav .burger-menu .login-button {
  display: none;
}

#ino-header nav.arduino-nav .level-1 .burger,
#ino-header nav.arduino-nav .burger-menu .burger {
  height: 18px;
  line-height: 9px;
}

#ino-header nav.arduino-nav .level-1 .burger img,
#ino-header nav.arduino-nav .burger-menu .burger img {
  position: relative;
  top: -4px;
}

#ino-header nav.arduino-nav .level-1:hover > a, #ino-header nav.arduino-nav .level-1:hover .login-button,
#ino-header nav.arduino-nav .burger-menu:hover > a,
#ino-header nav.arduino-nav .burger-menu:hover .login-button {
  background-color: #7fcbcd;
  color: #005c5f;
}

#ino-header nav.arduino-nav .level-1:hover.search-open #searchform,
#ino-header nav.arduino-nav .burger-menu:hover.search-open #searchform {
  background-color: #7fcbcd;
}

#ino-header nav.arduino-nav .level-1:hover > a#search-bar,
#ino-header nav.arduino-nav .burger-menu:hover > a#search-bar {
  background-color: transparent;
}

@media screen and (max-width: 1024px) {
  #ino-header nav.arduino-nav .level-1:hover > a, #ino-header nav.arduino-nav .level-1:hover .login-button,
  #ino-header nav.arduino-nav .burger-menu:hover > a,
  #ino-header nav.arduino-nav .burger-menu:hover .login-button {
    background-color: #00979d;
  }
}

#ino-header nav.arduino-nav .nav-left,
#ino-header nav.arduino-nav .nav-right {
  align-items: center;
  display: flex;
  height: 54px;
}

@media screen and (min-width: 1025px) {
  #ino-header nav.arduino-nav .nav-right,
  #ino-header nav.arduino-nav .nav-left {
    margin-right: 15px;
  }
}

#ino-header nav.arduino-nav .nav-left {
  align-self: flex-end;
  flex-grow: 1;
}

#ino-header nav.arduino-nav .has-submenu {
  position: relative;
}

#ino-header nav.arduino-nav .cart-submenu,
#ino-header nav.arduino-nav .nav-submenu {
  display: none;
  position: absolute;
  top: 54px;
}

#ino-header nav.arduino-nav .cart-submenu {
  right: 0;
}

#ino-header nav.arduino-nav .cart-submenu .dropdown-box {
  padding: 0;
}

#ino-header nav.arduino-nav .cart-submenu .dropdown-box .mini-products-list {
  margin: 0;
}

#ino-header nav.arduino-nav .cart-submenu .button {
  -webkit-transition: all 0.1s ease-out;
  -moz-transition: all 0.1s ease-out;
  transition: all 0.1s ease-out;
  background-color: #00979d;
  border: 0;
  box-shadow: 0 6px #005c5f;
  color: #fff;
  cursor: pointer;
  font-family: "Typonine Sans Medium", "Lucida Grande", Lucida, Verdana, sans-serif;
  font-size: 14px;
  letter-spacing: 1px;
  line-height: 14px;
  position: relative;
  text-align: center;
  text-transform: uppercase;
  top: 0;
}

#ino-header nav.arduino-nav .cart-submenu .button:hover, #ino-header nav.arduino-nav .cart-submenu .button:focus {
  border: 0;
  box-shadow: 0 4px #005c5f;
  outline: none;
  top: 2px;
}

#ino-header nav.arduino-nav .cart-submenu .button:active {
  box-shadow: none;
  top: 6px;
}

#ino-header nav.arduino-nav .store-location img {
  height: 20px;
  margin-top: 3px;
  vertical-align: baseline;
}

#ino-header nav.arduino-nav .store-location-button {
  display: none;
}

#ino-header nav.arduino-nav .store-location-button a {
  padding: 13px 14px;
}

@media screen and (max-width: 414px) {
  #ino-header nav.arduino-nav .cart-submenu {
    bottom: 0;
    left: 0;
    position: fixed;
    right: 0;
    top: 54px;
  }
  #ino-header nav.arduino-nav .cart-submenu .caret {
    border-color: transparent transparent #f4f4f4;
    right: 77px;
  }
  #ino-header nav.arduino-nav .cart-submenu .dropdown-box {
    border: 0;
    height: 100%;
    overflow-y: auto;
    position: static;
    width: 100%;
  }
  #ino-header nav.arduino-nav .cart-submenu .dropdown-box .cart-close-button {
    background-color: #f4f4f4;
    cursor: pointer;
    float: right;
    height: 35px;
    margin: 5px 7px 0 0;
    position: absolute;
    right: 0;
    top: 0;
    width: 35px;
    z-index: 1;
  }
  #ino-header nav.arduino-nav .cart-submenu .dropdown-box .cart-close-button::after {
    color: #434f54;
    content: '+';
    display: inline-block;
    font-family: "Typonine Sans Regular", "Lucida Grande", Lucida, Verdana, sans-serif;
    font-size: 34px;
    left: 10px;
    line-height: normal;
    position: relative;
    top: -5px;
    transform: rotate(45deg);
  }
  #ino-header nav.arduino-nav .cart-submenu .dropdown-box p.empty,
  #ino-header nav.arduino-nav .cart-submenu .dropdown-box p.loading-content {
    left: 0;
    margin: 0;
    position: absolute;
    top: 50%;
    transform: tranlsateY(-50%);
    width: calc(100% - 30px);
  }
  #ino-header nav.arduino-nav .cart-submenu .dropdown-box .mini-products-list {
    max-height: none;
  }
  #ino-header nav.arduino-nav .cart-submenu .dropdown-box .mini-products-list .product-image {
    height: auto;
  }
}

#ino-header nav.arduino-nav .nav-submenu {
  left: 0;
}

#ino-header nav.arduino-nav .nav-submenu li:last-child a {
  border-bottom: 0;
}

#ino-header nav.arduino-nav .nav-submenu li a {
  -webkit-transition: background 0.6s;
  -moz-transition: background 0.6s;
  transition: background 0.6s;
  background-color: #7fcbcd;
  border-bottom: 1px solid #a5f2ee;
  color: #005c5f;
  display: inline-block;
  font-size: 12px;
  margin: 0;
  padding: 10px 15px;
  white-space: nowrap;
}

#ino-header nav.arduino-nav .nav-submenu li a:hover {
  background-color: #00979d;
  color: #fff;
}

#ino-header nav.arduino-nav form#searchform,
#ino-header nav.arduino-nav form#searchform-mobile {
  -webkit-transition: width 0.6s;
  -moz-transition: width 0.6s;
  transition: width 0.6s;
  background-image: url("../images/search.svg");
  background-position: 0 -4px;
  background-repeat: no-repeat;
  background-size: 26px;
  cursor: pointer;
  height: 18px;
  margin: 0;
  padding: 7px 0;
  width: 28px;
}

#ino-header nav.arduino-nav form#searchform .search-typing,
#ino-header nav.arduino-nav form#searchform-mobile .search-typing {
  -webkit-transition: opacity 0.1s ease 0.1s;
  -moz-transition: opacity 0.1s ease 0.1s;
  transition: opacity 0.1s ease 0.1s;
  background-color: transparent;
  border: 0;
  box-sizing: border-box;
  color: #fff;
  cursor: pointer;
  font-size: 15px;
  height: 19px;
  letter-spacing: 1px;
  line-height: 18px;
  margin: 0;
  opacity: 0;
  outline: none;
  position: relative;
  top: -1px;
  width: 100%;
}

#ino-header nav.arduino-nav form#searchform .search-typing::-webkit-input-placeholder,
#ino-header nav.arduino-nav form#searchform-mobile .search-typing::-webkit-input-placeholder {
  color: #fff;
  font-family: "Typonine Sans Regular", "Lucida Grande", Lucida, Verdana, sans-serif;
  letter-spacing: .05em;
  line-height: 18px;
  text-transform: uppercase;
}

#ino-header nav.arduino-nav form#searchform .search-typing::-moz-placeholder,
#ino-header nav.arduino-nav form#searchform-mobile .search-typing::-moz-placeholder {
  color: #fff;
  font-family: "Typonine Sans Regular", "Lucida Grande", Lucida, Verdana, sans-serif;
  letter-spacing: .05em;
  line-height: 18px;
  text-transform: uppercase;
}

#ino-header nav.arduino-nav form#searchform .search-typing:-moz-placeholder,
#ino-header nav.arduino-nav form#searchform-mobile .search-typing:-moz-placeholder {
  color: #fff;
  font-family: "Typonine Sans Regular", "Lucida Grande", Lucida, Verdana, sans-serif;
  letter-spacing: .05em;
  line-height: 18px;
  text-transform: uppercase;
}

#ino-header nav.arduino-nav form#searchform .search-typing:-ms-input-placeholder,
#ino-header nav.arduino-nav form#searchform-mobile .search-typing:-ms-input-placeholder {
  color: #fff;
  font-family: "Typonine Sans Regular", "Lucida Grande", Lucida, Verdana, sans-serif;
  letter-spacing: .05em;
  line-height: 18px;
  text-transform: uppercase;
}

#ino-header nav.arduino-nav form#searchform:focus,
#ino-header nav.arduino-nav form#searchform-mobile:focus {
  outline: none;
}

#ino-header nav.arduino-nav form#searchform-mobile {
  background-color: #006d70;
  background-position: calc(100% - 10px) 2px;
  width: 100%;
}

#ino-header nav.arduino-nav form#searchform-mobile .search-typing {
  cursor: text;
  font-family: "Typonine Sans Regular", "Lucida Grande", Lucida, Verdana, sans-serif;
  opacity: 1;
  padding: 0 46px 0 20px;
}

#ino-header nav.arduino-nav.search-open #searchform {
  background-color: #006d70;
  background-position: 8px 2px;
  position: relative;
  top: -7px;
  width: 290px;
}

#ino-header nav.arduino-nav.search-open #searchform .search-typing {
  cursor: text;
  font-family: "Typonine Sans Regular", "Lucida Grande", Lucida, Verdana, sans-serif;
  opacity: 1;
  padding: 0 15px 0 40px;
}

#ino-header nav.arduino-nav .nav-right .nav-submenu {
  left: auto;
  right: 0;
}

#ino-header nav.arduino-nav .nav-right li {
  position: relative;
}

#ino-header nav.arduino-nav .language-selector {
  display: none;
}

#ino-header nav.arduino-nav .language-selector .dropdown-box {
  box-sizing: border-box;
  padding: 20px;
  width: 300px;
}

#ino-header nav.arduino-nav .language-selector li {
  margin-bottom: 13px;
}

#ino-header nav.arduino-nav .language-selector li:last-child {
  margin-bottom: 0;
}

#ino-header nav.arduino-nav .selected-language {
  background-position: center;
  background-repeat: no-repeat;
  background-size: 28px;
  height: 18px;
  width: 40px;
}

#ino-header nav.arduino-nav .selected-language.eng {
  background-image: url("../images/language_eng.svg");
}

#ino-header nav.arduino-nav .dropdown-box {
  background-color: #f4f4f4;
  border-top: 3px solid #fff;
  box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
  color: #434f54;
  display: inline-block;
  font-family: "Typonine Sans Regular", "Lucida Grande", Lucida, Verdana, sans-serif;
  margin-top: 0;
  position: relative;
  width: 300px;
}

#ino-header nav.arduino-nav .dropdown-box p.empty,
#ino-header nav.arduino-nav .dropdown-box p.loading-content {
  font-size: 14px;
  letter-spacing: .5px;
  line-height: 18px;
  margin: 30px 0;
  padding: 0 15px;
  text-align: center;
}

#ino-header nav.arduino-nav .dropdown-box p.empty a,
#ino-header nav.arduino-nav .dropdown-box p.loading-content a {
  color: #00979d;
  display: inline-block;
  font-weight: normal;
  letter-spacing: .5px;
  padding: 0;
  text-transform: none;
}

#ino-header nav.arduino-nav .dropdown-box p.empty a:hover,
#ino-header nav.arduino-nav .dropdown-box p.loading-content a:hover {
  color: #006d70;
}

#ino-header nav.arduino-nav .dropdown-box h5 {
  color: #7f8c8d;
  font-size: 12px;
  letter-spacing: 2.5px;
  line-height: 15px;
  margin-bottom: 30px;
  text-align: center;
  text-transform: uppercase;
}

#ino-header nav.arduino-nav .dropdown-box ul {
  color: #7f8c8d;
  font-size: 12px;
  letter-spacing: 2px;
  line-height: 15px;
}

#ino-header nav.arduino-nav .dropdown-box ul button {
  background-color: transparent;
  border: 0;
  margin: 0 13px 0 0;
  padding: 0;
}

#ino-header nav.arduino-nav .dropdown-box ul button.language-btn {
  cursor: pointer;
}

#ino-header nav.arduino-nav .dropdown-box ul button.language-btn img {
  -webkit-transition: opacity 0.3s;
  -moz-transition: opacity 0.3s;
  transition: opacity 0.3s;
  opacity: 1;
  vertical-align: middle;
}

#ino-header nav.arduino-nav .dropdown-box ul button.language-btn:hover img {
  opacity: .7;
}

#ino-header nav.arduino-nav .dropdown-box ul button.currency-btn {
  -webkit-transition: background-color 0.3s, color 0.3s;
  -moz-transition: background-color 0.3s, color 0.3s;
  transition: background-color 0.3s, color 0.3s;
  background-color: #dae3e3;
  color: #7f8c8d;
  cursor: pointer;
  font-size: 11px;
  letter-spacing: 2.5px;
  margin: 2px 12px 2px 0;
  max-height: 28px;
  padding: 6px 11px;
  width: 50px;
}

#ino-header nav.arduino-nav .dropdown-box ul button.currency-btn:hover, #ino-header nav.arduino-nav .dropdown-box ul button.currency-btn:active {
  background-color: #00979d;
  color: #fff;
}

#ino-header nav.arduino-nav .dropdown-box ul button:focus {
  outline: none;
}

#ino-header nav.arduino-nav .profile-dropdown .dropdown-box {
  width: 160px;
}

#ino-header nav.arduino-nav .caret {
  border-color: transparent transparent #fff;
  border-style: solid;
  border-width: 0 7.5px 8.5px;
  position: absolute;
  right: 21px;
  top: -7px;
  z-index: 1;
}

#ino-header nav.arduino-nav .left-col {
  border-right: 1px solid #dae3e3;
  padding-right: 20px;
}

#ino-header nav.arduino-nav .right-col {
  border-left: 1px solid #dae3e3;
  padding-left: 20px;
}

#ino-header nav.arduino-nav .profile {
  height: 18px;
}

#ino-header nav.arduino-nav #cart {
  height: 18px;
}

#ino-header nav.arduino-nav #cart img {
  position: relative;
  top: -4px;
}

#ino-header nav.arduino-nav .actions {
  display: flex;
  margin: 20px 20px 26px;
}

#ino-header nav.arduino-nav .actions .button {
  flex: 1;
  padding: 13px 20px;
}

#ino-header nav.arduino-nav .actions .button:first-child {
  margin-right: 5px;
}

#ino-header nav.arduino-nav .actions .button:last-child {
  margin-left: 5px;
}

@media screen and (max-width: 414px) {
  #ino-header nav.arduino-nav .actions {
    margin-bottom: 60px;
  }
}

#ino-header nav.arduino-nav .mini-products-list {
  max-height: 377px;
  overflow-y: auto;
  padding: 0;
}

#ino-header nav.arduino-nav .mini-products-list .item {
  align-items: center;
  border-bottom: 1px solid #dae3e3;
  display: flex;
  margin: 0 20px;
  padding: 15px 10px;
  width: calc(100% - 60px);
}

@media screen and (max-width: 414px) {
  #ino-header nav.arduino-nav .mini-products-list .item:first-child {
    border-top: 1px solid #dae3e3;
    margin-top: 42px;
  }
}

#ino-header nav.arduino-nav .mini-products-list .item .product-image,
#ino-header nav.arduino-nav .mini-products-list .item .product-details {
  float: left;
  position: relative;
}

#ino-header nav.arduino-nav .mini-products-list .item .product-image {
  align-items: center;
  display: flex;
  height: 63px;
  margin-right: 15px;
  overflow: hidden;
  padding: 0;
  width: calc(35% - 15px);
}

#ino-header nav.arduino-nav .mini-products-list .item .product-image img {
  height: auto;
  max-width: 100%;
  width: 100%;
}

#ino-header nav.arduino-nav .mini-products-list .item .product-details {
  letter-spacing: 1.28px;
  text-transform: uppercase;
  width: 65%;
}

#ino-header nav.arduino-nav .mini-products-list .item .product-details .product-name {
  margin: 0 0 4px;
}

#ino-header nav.arduino-nav .mini-products-list .item .product-details .product-name a {
  color: #434f54;
  font-family: "Typonine Sans Regular", "Lucida Grande", Lucida, Verdana, sans-serif;
  font-size: 14px;
  letter-spacing: 1.28px;
  line-height: 18px;
  padding: 0;
  text-transform: none;
  white-space: normal;
}

#ino-header nav.arduino-nav .mini-products-list .item .product-details .item-description {
  display: inline-block;
  margin: 0;
}

#ino-header nav.arduino-nav .mini-products-list .item .product-details .item-description:first-child {
  margin: 0;
}

#ino-header nav.arduino-nav .badge {
  background-color: #f1c40f;
  border-radius: 10px;
  color: #fff;
  display: none;
  font-size: 10px;
  left: 9px;
  letter-spacing: 1px;
  min-width: 20px;
  padding: 0 1px;
  position: absolute;
  text-align: center;
  top: 26px;
  width: auto;
  z-index: 2;
}

#ino-header nav.arduino-nav .forum-messages .badge {
  left: 2px;
  top: 7px;
}

@media screen and (min-width: 769px) {
  #ino-header nav.arduino-nav .profile img, #ino-header nav.arduino-nav .profile svg {
    border-radius: 50%;
    height: 28px;
    position: relative;
    top: -4px;
    width: 28px;
  }
  #ino-header nav.arduino-nav .profile svg {
    fill: #fff;
  }
  #ino-header nav.arduino-nav .user-mobile {
    display: none;
  }
}

@media screen and (min-width: 1025px) and (max-width: 1200px) {
  #ino-header nav.arduino-nav:not(.collapsed) .nav-left {
    flex-grow: 0;
  }
}

@media screen and (min-width: 1025px) {
  #ino-header nav.arduino-nav.collapsed.search-open .logo-link {
    left: -100%;
  }
  #ino-header nav.arduino-nav .profile-dropdown .nav-submenu a {
    background-color: #f4f4f4;
    border-bottom: 0;
    color: #434f54;
    display: block;
    font-family: "Typonine Sans Regular", "Lucida Grande", Lucida, Verdana, sans-serif;
    font-size: 13px;
    font-weight: 400;
    height: 18px;
    letter-spacing: 1.28px;
    line-height: normal;
    margin: 0;
    padding: 7px 10px;
    text-transform: none;
  }
  #ino-header nav.arduino-nav .profile-dropdown .nav-submenu a:hover {
    background-color: #dae3e3;
    color: #434f54;
  }
  #ino-header nav.arduino-nav .profile-dropdown .nav-submenu .caret {
    right: 21px;
  }
  #ino-header nav.arduino-nav .nav-right .level-1.has-submenu:hover .nav-submenu {
    display: block;
  }
  #ino-header nav.arduino-nav .has-submenu:hover .nav-submenu {
    display: block;
  }
  #ino-header nav.arduino-nav .ul-burger {
    display: none;
  }
  #ino-header nav.arduino-nav .main-nav {
    flex-grow: 1;
  }
}

@media screen and (min-width: 1025px) and (max-width: 1200px) {
  #ino-header nav.arduino-nav:not(.collapsed) .main-nav {
    align-items: flex-end;
    flex-direction: column-reverse;
    justify-content: space-between;
  }
}

@media screen and (max-width: 1024px) {
  #ino-header nav.arduino-nav {
    height: 54px;
    /* .caret {
      display: none;
    } */
  }
  #ino-header nav.arduino-nav .logo-link {
    background-position: 30px -100px, 20px 11px;
    height: 32px;
    padding: 11px 30px;
    width: 58px;
  }
  #ino-header nav.arduino-nav .main-nav {
    flex-direction: row-reverse;
  }
  #ino-header nav.arduino-nav .burger-menu {
    display: block;
  }
  #ino-header nav.arduino-nav .burger-menu a {
    margin: 0;
    padding: 18px 14px;
  }
  #ino-header nav.arduino-nav .burger-menu:hover a {
    margin: 0;
    padding: 18px 14px;
  }
  #ino-header nav.arduino-nav .forum-messages .badge {
    left: 20px;
    top: 18px;
  }
  #ino-header nav.arduino-nav .profile-dropdown .caret {
    display: none;
  }
  #ino-header nav.arduino-nav .profile-dropdown .dropdown-box {
    border: 0;
    padding: 0 0;
  }
  #ino-header nav.arduino-nav .profile-dropdown .nav-submenu {
    position: absolute;
    top: 100%;
    right: 0;
    bottom: auto;
    left: 0;
    -webkit-transition: max-height 0.6s;
    -moz-transition: max-height 0.6s;
    transition: max-height 0.6s;
    display: flex;
    height: auto;
    left: calc(-100vw + 102px);
    max-height: 0;
    overflow-x: hidden;
    overflow-y: auto;
    width: 100vw;
  }
  #ino-header nav.arduino-nav .profile-dropdown .nav-submenu.open {
    max-height: 100vh;
  }
  #ino-header nav.arduino-nav .profile-dropdown .nav-submenu li {
    background-color: #7fcbcd;
    height: auto;
  }
  #ino-header nav.arduino-nav .profile-dropdown .nav-submenu a {
    box-sizing: border-box;
    color: #005c5f;
    margin: 0;
    padding: 18px 14px;
    text-align: center;
    width: 100vw;
  }
  #ino-header nav.arduino-nav .profile-dropdown .nav-submenu:hover > a {
    background-color: #00979d;
    color: #fff;
    margin: 0;
    padding: 18px 14px;
  }
  #ino-header nav.arduino-nav .nav-left {
    position: absolute;
    top: 100%;
    right: 0;
    bottom: auto;
    left: 0;
    -webkit-transition: max-height 0.6s;
    -moz-transition: max-height 0.6s;
    transition: max-height 0.6s;
    flex-direction: column;
    height: auto;
    max-height: 0;
    overflow-x: hidden;
    overflow-y: auto;
  }
  #ino-header nav.arduino-nav .nav-left.open {
    max-height: calc(100vh - 50px);
  }
  #ino-header nav.arduino-nav .nav-left .level-1 {
    background-color: #7fcbcd;
    height: auto;
  }
  #ino-header nav.arduino-nav .nav-left .level-1.signin-mobile, #ino-header nav.arduino-nav .nav-left .level-1.signout-mobile, #ino-header nav.arduino-nav .nav-left .level-1.profile-mobile {
    background-color: #00979d;
  }
  #ino-header nav.arduino-nav .nav-left .level-1.signin-mobile a, #ino-header nav.arduino-nav .nav-left .level-1.signout-mobile a, #ino-header nav.arduino-nav .nav-left .level-1.profile-mobile a {
    border-bottom: 0;
    color: #fff;
  }
  #ino-header nav.arduino-nav .nav-left .level-1.signin-mobile:hover .login-button a {
    background-color: #00979d;
    color: #fff;
  }
}

@media screen and (max-width: 1024px) and (min-width: 481px) and (max-width: 768px) {
  #ino-header nav.arduino-nav .nav-left .level-1.signin-mobile, #ino-header nav.arduino-nav .nav-left .level-1.profile-mobile {
    border-top: 1px solid #34afb3;
  }
}

@media screen and (max-width: 1024px) {
  #ino-header nav.arduino-nav .nav-left .level-1.profile-mobile a {
    border-bottom: 1px solid #34afb3;
  }
  #ino-header nav.arduino-nav .nav-left .level-1.profile-mobile:hover .auth-required > a, #ino-header nav.arduino-nav .nav-left .level-1.signout-mobile:hover .auth-required > a {
    background-color: #00979d;
    color: #fff;
  }
  #ino-header nav.arduino-nav .nav-left .level-1 a {
    border-bottom: 1px solid #a5f2ee;
    box-sizing: border-box;
    color: #005c5f;
    margin: 0;
    padding: 18px 14px;
    text-align: center;
    width: 100vw;
  }
  #ino-header nav.arduino-nav .nav-left .level-1 a#search-bar-mobile {
    background-color: #00979d;
    border-bottom: 1px solid #34afb3;
    border-top: 1px solid #34afb3;
    padding: 18px;
  }
  #ino-header nav.arduino-nav .nav-left .level-1:hover > a,
  #ino-header nav.arduino-nav .nav-left .level-1:hover .login-button > a,
  #ino-header nav.arduino-nav .nav-left .level-1:hover .auth-required > a {
    background-color: #00979d;
    color: #fff;
    margin: 0;
    padding: 18px 14px;
  }
  #ino-header nav.arduino-nav .nav-left .level-1:hover > a#search-bar-mobile,
  #ino-header nav.arduino-nav .nav-left .level-1:hover .login-button > a#search-bar-mobile,
  #ino-header nav.arduino-nav .nav-left .level-1:hover .auth-required > a#search-bar-mobile {
    background-color: #00979d;
  }
}

@media screen and (max-width: 1024px) and (max-width: 1024px) {
  #ino-header nav.arduino-nav .nav-left .level-1:hover > a,
  #ino-header nav.arduino-nav .nav-left .level-1:hover .login-button > a,
  #ino-header nav.arduino-nav .nav-left .level-1:hover .auth-required > a {
    background-color: #7fcbcd;
    color: #005c5f;
  }
  #ino-header nav.arduino-nav .nav-left .level-1:hover > a#search-bar-mobile,
  #ino-header nav.arduino-nav .nav-left .level-1:hover .login-button > a#search-bar-mobile,
  #ino-header nav.arduino-nav .nav-left .level-1:hover .auth-required > a#search-bar-mobile {
    background-color: #00979d;
  }
}

@media screen and (max-width: 1024px) {
  #ino-header nav.arduino-nav .nav-left .level-1 .nav-submenu {
    -webkit-transition: max-height 0.6s;
    -moz-transition: max-height 0.6s;
    transition: max-height 0.6s;
    display: block;
    height: auto;
    max-height: 0;
    overflow: hidden;
    position: static;
  }
  #ino-header nav.arduino-nav .nav-left .level-1 .nav-submenu li a {
    background-color: #ecf1f1;
    border-bottom: 1px solid #dae3e3;
    color: #7f8c8d;
    padding: 10px 15px;
  }
  #ino-header nav.arduino-nav .nav-left .level-1 .nav-submenu li a:hover {
    background-color: #dae3e3;
  }
  #ino-header nav.arduino-nav .nav-left .level-1 .nav-submenu.open {
    max-height: 100vh;
  }
}

@media screen and (max-width: 768px) {
  #ino-header nav.arduino-nav.search-open .logo-link {
    left: -100%;
  }
  #ino-header nav.arduino-nav .level-1 .profile {
    display: none;
  }
  #ino-header nav.arduino-nav .level-1:not(.user-mobile) .login-button a {
    display: none;
  }
  #ino-header nav.arduino-nav .user-mobile {
    display: block;
  }
  #ino-header nav.arduino-nav.search-open form#searchform {
    width: 290px;
  }
}

#ino-header nav.arduino-nav .show-mobile {
  display: none;
}

#ino-header nav.arduino-nav .level-1 .show-mobile {
  display: none;
}

#ino-header nav.arduino-nav .fake-button {
  background-color: #00979d;
  min-height: 60px;
  width: 100vw;
}

@media screen and (max-width: 480px) {
  #ino-header nav.arduino-nav.collapsed .logo-link,
  #ino-header nav.arduino-nav .logo-link {
    padding: 11px 20px;
  }
  #ino-header nav.arduino-nav .show-mobile {
    display: block;
  }
  #ino-header nav.arduino-nav .level-1 .show-mobile {
    display: block;
  }
  #ino-header nav.arduino-nav .level-1 .header-hide-mobile {
    display: none;
  }
  #ino-header nav.arduino-nav .header-hide-mobile {
    display: none;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
